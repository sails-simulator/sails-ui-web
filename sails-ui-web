#!/usr/bin/env python3.5

import asyncio
import json
import logging
import os
import sys

from aiohttp import web
import sailsd

logging.basicConfig(level=logging.DEBUG)

global static_path

static_path = os.path.dirname(__file__)


async def get_handler(request):
    name = request.match_info.get('file', None)
    if name is None:
        name = 'index.html'
    if name in {'index.html'}:
        name = os.path.join(static_path, name)
        with open(name) as f:
            body = f.read()
        return web.Response(body=body.encode('utf-8'),
                            content_type='text/html')
    else:
        return web.Response(status=404)


async def wshandler(request):
    app = request.app
    ws = web.WebSocketResponse()
    await ws.prepare(request)
    app['sockets'].append(ws)

    async for msg in ws:
        if msg.tp == aiohttp.MsgType.text:
            if msg.data == 'close':
                app['sockets'].remove(ws)
                await ws.close()
        elif msg.tp == aiohttp.MsgType.error:
            app['sockets'].remove(ws)
            print('ws connection closed with exception %s' % ws.exception())

    return ws


async def listen_to_sailsd(app):
    try:
        host = os.getenv('SAILSD_HOST', 'localhost')
        port = int(os.getenv('SAILSD_PORT', '3333'))
        sails = sailsd.Sailsd(host, port)
        while True:
            closed_ws = []
            for ws in app['sockets']:
                if ws.closed:
                    closed_ws.append(ws)
                else:
                    await ws.send_str(json.dumps(sails.request(
                        'latitude',
                        'longitude',
                        'heading',
                        'sail-angle',
                        'rudder-angle',
                        'wind-speed',
                        'wind-angle')
                    ))
            for ws in closed_ws:
                app["sockets"].remove(ws)
            await asyncio.sleep(0.05)  # TODO: decrease this length of time
    except asyncio.CancelledError:
        print('Cancel sailsd listener: close connections...')


async def start_background_tasks(app):
    print('starting sailsd_listener')
    app['sailsd_listener'] = app.loop.create_task(listen_to_sailsd(app))


def main():
    app = web.Application()
    app.on_startup.append(start_background_tasks)
    app.router.add_route('GET', '/ws', wshandler)
    app.router.add_route('GET', '/{file}', get_handler)
    app.router.add_route('GET', '/', get_handler)
    app['sockets'] = []

    web.run_app(app)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        static_path = sys.argv[1]
    main()
